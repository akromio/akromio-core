use (
  alias://expected
  {monitor, sim, method} = alias://doubles

  RedisStreamsTriggerImpl
)

suite(__filename, proc()
  const (
    group = "botnet"
    consumer = "cavani"
  )

  suite("start()", proc()
    test("when called, redis.connect() must be called and instance initialized", proc()
      # (1) act
      const (
        stream = "cavani"
        handler = nop
        redis = monitor(sim(connect = method.returns()), method = "connect")
        trigger = RedisStreamsTriggerImpl(redis=, stream, group, consumer)
        out = trigger.start(handler)
      )

      # (2) assessment
      expected(out).sameAs(trigger).toHave(fired = 0, handler)
      
      const connect = monitor.log(redis, clear = true)
      expected(connect.calls).equalTo(1)
    end)
  end)

  suite("stop()", proc()
    test("when called, redis.disconnect() must be called and instante niled", proc()
      # (1) act
      const (
        stream = "cavani"
        redis = monitor(sim(disconnect = method.returns()), method = "disconnect")
        trigger = RedisStreamsTriggerImpl(redis=, stream, group, consumer)
        out = trigger.stop()
      )

      # (2) assessment
      expected(out).sameAs(trigger).toHave(handler = nil)
      
      const disconnect = monitor.log(redis, clear = true)
      expected(disconnect.calls).equalTo(1)
    end)
  end)

  suite("gather()", proc()
    test("when called and unavailable data, no handler call muyst be performed", async proc()
      # (1) act
      const (
        stream = "cavani"
        handler = monitor(method.resolves())
        redis = sim(connect = method.returns(), sendCommand = method.resolves([]))
        trigger = RedisStreamsTriggerImpl(redis=, handler, stream, group, consumer)
        out = await(trigger.gather(5))
      )

      # (2) assessment
      expected(out).toBeNil()

      const hlog = monitor.log(handler, clear = true)
      expected(hlog.calls).equalTo(0)
    end)

    test("when called and available data, new items must be read from the Redis stream", async proc()
      # (1) act
      const (
        stream = "cavani"
        job = {job = "backup", args = nil, assignTs = 1673076355206, assignee = "cavani", ts = 1673076355206}
        resp = [
          [
            stream
            [["1673076355208-1", ["req", json.encode(job)]]]
          ]
        ]
        handler = monitor(method.resolves())
        redis = sim(connect = method.returns(), sendCommand = method.resolves(resp))
        trigger = RedisStreamsTriggerImpl(redis=, handler, stream, group, consumer)
        out = await(trigger.gather(5))
      )

      # (2) assessment
      expected(out).toBeNil()

      const hlog = monitor.log(handler, clear = true)
      expected(hlog.calls).equalTo(1)
      expected(hlog.getCall(0).args).it(0).equalTo(last = false, call = {jobName = job.job, args = job.args})
    end)

    test("when times set and reached, last must be set", async proc()
      # (1) act
      const (
        stream = "cavani"
        job = {job = "backup", args = nil, assignTs = 1673076355206, assignee = "cavani", ts = 1673076355206}
        resp = [
          [
            stream
            [["1673076355208-1", ["req", json.encode(job)]]]
          ]
        ]
        handler = monitor(method.resolves())
        redis = sim(connect = method.returns(), sendCommand = method.resolves(resp))
        trigger = RedisStreamsTriggerImpl(redis=, times = 1, handler, stream, group, consumer)
        out = await(trigger.gather(5))
      )

      # (2) assessment
      expected(out).toBeNil()

      const hlog = monitor.log(handler, clear = true)
      expected(hlog.calls).equalTo(1)
      expected(hlog.getCall(0).args).it(0).equalTo(last = true, call = {jobName = job.job, args = job.args})
    end)
  end)
end)
