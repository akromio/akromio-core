/**
 * A trigger implementation to fire an event read from a Redis Stream stream.
 */
export struct RedisStreamsTriggerImpl
  /**
   * Redis client to use for querying the stream.
   */
  @hidden
  pub const redis

  /**
   * Redis Streams stream name.
   */
  pub const stream: text

  /**
   * Redis Streams consumer group name associted to this consumer.
   */
  pub const group: text

  /**
   * Consumer name into the group.
   */
  pub const consumer: text

  /**
   * Number of times the trigger must be fired.
   *
   * If unset, infinite.
   */
  pub const times?: num

  /**
   * Number of times fired up to now.
   */
  @hidden @strict
  pub var fired = 0

  /**
   * Handler to call when event fired.
   *
   * Prototype: proc(e: {ts: timestamp, payload: map}).
   */
  @hidden
  pub var handler?: func

  /**
   * Starts the trigger.
   *
   * @dev
   * Right now, the stream is queried every 333ms.
   * If no message waiting, wait for the next interval.
   */
  pub fn start(handler: func) -> self
    # (1) pre: connect to Redis instance
    self.redis.connect()

    # (2) initiate
    self.{handler, fired = 0}
  
  /**
   * Stops de trigger.
   */
  pub fn stop() -> self
    self.handler = nil
    self.redis.disconnect()
  
  /**
   * Gathers a new batch of data.
   */
  pub async proc gather(size: num)
    # (1) read message
    const (
      {redis, stream, group, consumer} = self
      resp = await(redis.sendCommand([
        "XREADGROUP"
        "GROUP", group, consumer
        "COUNT", text(size)
        "BLOCK", "1000"
        "NOACK"
        "STREAMS", stream, ">"
      ]))
    )

    # (2) handle stream events
    if len(resp) > 0 then
      self.fired += 1

      # [0] = stream name; [1] = list of items/events
      for each item in resp[0][1] do
        const (
          [_, data] = item              # [0] = ts; [1] = data[]
          value = json.decode(data[1])  # [0] = "req"; [1] = "value"
          call = {jobName = value.job, args = value.args}
        )

        await(self.handler(
          last = self.times is num and self.fired >= self.times
          call
        ))
