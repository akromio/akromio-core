use (
  alias://expected
  {monitor} = alias://doubles
  {'impl' as TriggerImpl} = ~
)

suite.only(__filename, proc()
  const interval = "10s"

  setup(proc()
    monitor.clearAll()
  end)

  suite("start()", proc()
    test("when called, the timer must be started", proc()
      # (1) act
      const (
        handler = monitor(nop)
        trigger = TriggerImpl(interval=).start(handler)
      )

      # (2) assessment
      do
        expected(trigger)\
          .toHave(times = nil, fired = 0)\
          .member("handler").sameAs(handler)\
          .member("timer").notToBeNil()
        
        const log = monitor.log(handler)
        expected(log.calls).equalTo(0)
      finally
        trigger.stop()
    end)
  end)

  suite("stop()", proc()
    test("when called, timer must be cleared", proc()
      # (1) act
      const (
        trigger = TriggerImpl(interval=).start(nop).stop()
      )

      # (2) assessment
      expected(trigger).members("handler", "timer").toBeNil()
    end)
  end)

  test("when immediate is true, first event must be fired immediately", async proc()
    # (1) act
    const (
      handler = monitor(nop)
      trigger = TriggerImpl(interval = "225ms").start(handler)
    )

    await(sleep(800))

    # (2) assessment
    do
      const (
        log = monitor.log(handler)
        fired = 4
      )

      expected(log.calls).equalTo(fired)

      for i = 0; i < fired; i += 1 do
        expected(log.getCall(i).args).it(0).toBe("IntervalEvent")
    finally
      trigger.stop()
  end)

  test("when immediate is false, the first event is fired after interval", async proc()
    # (1) act
    const (
      handler = monitor(nop)
      trigger = TriggerImpl(immediate = false, interval = "225ms").start(handler)
    )

    await(sleep(800))

    # (2) assessment
    do
      const (
        log = monitor.log(handler)
        fired = 3
      )

      expected(log.calls).equalTo(fired)

      for i = 0; i < fired; i += 1 do
        expected(log.getCall(i).args).it(0).toBe("IntervalEvent")
    finally
      trigger.stop()
  end)

  test("when times reached, no more event must be fired", async proc()
    # (1) act
    const (
      times = 2
      handler = monitor(nop)
      trigger = TriggerImpl(interval = "225ms", times).start(handler)
    )

    await(sleep(800))

    # (2) assessment
    do
      const log = monitor.log(handler)
      expected(log.calls).equalTo(times)

      for i = 0; i < times; i += 1 do
        expected(log.getCall(i).args).it(0).toBe("IntervalEvent")
    finally
      trigger.stop()
  end)
end)
