use (
  alias://expected
  {fun} = alias://doubles
  ArgsParser
)

suite(__filename, proc()
  const parser = ArgsParser(prefix = "KRM_ARG_")

  suite("parse()", proc()
    suite("in-line argument", proc()
      test("when env variables, these must be parsed and returned in a map", async proc()
        # (1) act
        const (
          env = {KRM_ARG_x = 1, KRM_ARG_y = 2, ARG_z = 3}
          out = await(parser.parse([], env, nop))
        )

        # (2) assessment
        expected(out).equalTo(x = 1, y = 2)
      end)

      test("when arg lines, these must be parsed and returned in a map", async proc()
        # (1) act
        const (
          args = ["x=1", "y = 2"]
          out = await(parser.parse(args, {}, nop))
        )

        # (2) assessment
        expected(out).equalTo(
          x = 1
          y = 2
        )
      end)

      test("when encoded value in json, this must be decoded and returned", async proc()
        # (1) act
        const (
          value = {x = 1, y = 2}
          args = ["arg=json://" + json.encode(value)]
          out = await(parser.parse(args, {}, nop))
        )

        # (2) assessment
        expected(out).equalTo(arg = value)
      end)

      test("when encoded value in json+base64, this must be decoded and returned", async proc()
        # (1) act
        const (
          value = {x = 1, y = 2, z = 3}
          arg = Buffer.from(json.encode(value)).toString("base64")
          args = ["arg=json+base64://" + arg]
          out = await(parser.parse(args, {}, nop))
        )

        # (2) assessment
        expected(out).equalTo(arg = value)
      end)
    end)
    

    test("when arg files, these must be parsed and returned in a map", async proc()
      # (1) act
      const (
        filePaths = ["args1.yaml", "args2.yaml"]
        resolver = fun([
          {args = ["args1.yaml"], resolves = {x = 1, y = 1}}
          {args = ["args2.yaml"], resolves = {y = 2, z = 3}}
        ])
        out = await(parser.parse(filePaths, {}, resolver))
      )

      # (2) assessment
      expected(out).equalTo(x = 1, y = 2, z = 3)
    end)
  end)
end)
