use (
  alias://expected
  {monitor, interceptor} = alias://doubles
  {CallReqStream} = alias://core

  Trigger, TriggerState
)

struct TriggerImpl
  pub var handler?: func
  pub proc start(handler: func) self.{handler}
  pub proc stop()
  pub async proc fireEvent(e?)
    await(self.handler(e))

suite(__filename, proc()
  const (
    name = "test" #the trigger name
    call = {jobName = "hello", args = [1, 2, 3]}
  )

  suite("start()", proc()
    test("when non started, impl.start() must be called", async proc()
      # (1) act
      const (
        triggerImpl = monitor(TriggerImpl(), method = "start")
        stream = CallReqStream()
        trigger = Trigger(name=, stream, triggerImpl)
      )

      await(trigger.start())

      # (2) assessment
      expected(trigger).toHave(state = TriggerState.started)

      const start = monitor.log(triggerImpl, clear = true)
      expected(start.calls).equalTo(1)
      expected(start.call.args).toHaveLen(1).first.toBeFn()
    end)

    test("when started, error must be raised", async proc()
      # (1) act
      const (
        triggerImpl = TriggerImpl()
        stream = CallReqStream()
        trigger = await(Trigger(name=, stream, triggerImpl).start())
        out = pawait(trigger.start())
      )

      # (2) assessment
      expected(out)\
        .first.equalTo(false)\
        .second.equalTo(TypeError("The trigger has been already started."))
    end)
  end)

  suite("stop()", proc()
    test("when non started, nothing to do", async proc()
      # (1) act
      const (
        triggerImpl = monitor(TriggerImpl(), method = "stop")
        stream = CallReqStream()
        trigger = Trigger(name=, stream, triggerImpl)
      )

      await(trigger.stop())

      # (2) assessment
      const stop = monitor.log(triggerImpl, clear = true)

      expected(trigger).toHave(state = TriggerState.nonStarted)
      expected(stop.calls).equalTo(0)
    end)

    test("when started, impl.stop() must be called", async proc()
      # (1) act
      const (
        triggerImpl = monitor(TriggerImpl(), method = "stop")
        stream = CallReqStream()
        trigger = await(Trigger(name=, stream, triggerImpl).start())
      )

      await(trigger.stop())

      # (2) assessment
      const stop = monitor.log(triggerImpl, clear = true)
      expected(stop.calls).equalTo(1)
    end)

    test("when callback set, this must be called", async proc()
      # (1) act
      const (
        triggerImpl = TriggerImpl()
        callback = monitor(nop)
        stream = CallReqStream()
        trigger = await(Trigger(name=, stream, triggerImpl).start(callback))
      )

      await(trigger.stop())

      # (2) assessment
      const log = monitor.log(callback)
      expected(log.calls).equalTo(1)
    end)
  end)

  suite("handle()", proc()
    test("when trigger is stopped, error must be raised", async proc()
      # (1) act
      const (
        triggerImpl = TriggerImpl()
        stream = CallReqStream()
        trigger = await(await(Trigger(name=, stream, triggerImpl).start()).stop())
        e = {ts = timestamp(), call, last = false}
        out = pawait(triggerImpl.fireEvent(e))
      )

      # (2) assessment
      expected(out).first.equalTo(false).second.equalTo(TypeError("Trigger is stopped."))
    end)

    test("when started and called, call must be streamed", async proc()
      # (1) act
      const (
        triggerImpl = monitor(TriggerImpl(), method = "stop")
        stream = monitor(CallReqStream(), method = "append")
        trigger = await(Trigger(name=, stream, triggerImpl).start())
        e = {ts = timestamp(), call, last = false}
      )

      await(triggerImpl.fireEvent(e))

      # (2) assessment
      expected(trigger.state).equalTo(TriggerState.started)

      const append = monitor.log(stream, clear = true)
      expected(append.calls).equalTo(1)
      expected(append.calledWith([call])).equalTo(1)

      const stop = monitor.log(triggerImpl, clear = true)
      expected(stop.calls).equalTo(0)
    end)

    test("when started and called with last event, impl.stop() and stream.end() must be called", async proc()
      # (1) act
      const (
        triggerImpl = monitor(TriggerImpl(), method = "stop")
        stream = monitor(CallReqStream(), method = "end")
        trigger = await(Trigger(name=, stream, triggerImpl).start())
        e = {ts = timestamp(), call, last = true}
      )

      await(triggerImpl.fireEvent(e))

      # (2) assessment
      expected(trigger.state).equalTo(TriggerState.stopped)

      const 'end' = monitor.log(stream, clear = true)
      expected('end'.calls).equalTo(1)

      const stop = monitor.log(triggerImpl, clear = true)
      expected(stop.calls).equalTo(1)
    end)

    test("when job is __exit__, impl.stop() and stream.end() must be called", async proc()
      # (1) act
      const (
        triggerImpl = monitor(TriggerImpl(), method = "stop")
        stream = monitor(CallReqStream(), method = "end")
        trigger = await(Trigger(name=, stream, triggerImpl).start())
        call = {jobName = "__exit__"}
        e = {ts = timestamp(), call, last = false}
      )

      await(triggerImpl.fireEvent(e))

      # (2) assessment
      expected(trigger.state).equalTo(TriggerState.stopped)

      const 'end' = monitor.log(stream, clear = true)
      expected('end'.calls).equalTo(1)

      const stop = monitor.log(triggerImpl, clear = true)
      expected(stop.calls).equalTo(1)
    end)
  end)
end)
