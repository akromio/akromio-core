use (
  JobCall
  TriggerImpl
  TriggerState
)

/**
 * A trigger, that is, a component to request the execution
 * of a job.
 *
 * @remarks
 * This is a wrapper for the real triggers that are imported.
 */
export struct Trigger
  /**
   * The trigger name.
   */
  pub const name: text

  /**
   * The engine to request the execution of the job.
   */
  pub const engine

  /**
   * The function to call when finished.
   */
  pub var callback?: func

  /**
   * The current state.
   */
  @hidden @strict
  pub var _state = TriggerState.nonStarted

  /**
   * The current state.
   */
  pub fn state = self._state

  /**
   * The trigger implementation.
   */
  pub const triggerImpl: TriggerImpl

  /**
   * Starts the trigger.
   */
  pub async fn start(callback?: func) -> self
    # (1) pre
    if self.state !=~ nonStarted then
      throw(TypeError("The trigger has been already started."))

    # (2) start
    self.{callback}
    await(self.triggerImpl.start(bind(self, "handle")))
    self._state =~ started

  /**
   * Ends the trigger.
   */
  pub async fn stop() -> self
    if self.state not in [TriggerState.nonStarted, TriggerState.stopped] then
      do
        await(self.triggerImpl.stop())
      finally
        if self.callback then self.callback()
        self._state =~ stopped
  
  /**
   * Handles a given event.
   *
   * If the handler returns {finished = true}, the trigger stop method
   * is called.
   *
   * @remarks
   * Right now, only one event can be handled at the same time.
   */
  @hidden
  pub async proc handle(e: {call: JobCall, last?: bool})
    # (1) pre
    if self._state ==~ running then
      throw(TypeError("Trigger still processing an event."))

    # (2) process event
    self._state =~ running

    if e.call.jobName == "__exit__" then
      e = {last = true}
    else
      await(self.engine.run(e.call.jobName, e.call.args))

    if e.last === true then
      await(self.stop())
    else
      self._state =~ started
