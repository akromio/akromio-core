use (
  alias://expected
  {simulator} = alias://doubles
  {GlobalDataset} = alias://dataset
  {Ops, StaticAction as Action, ActionOperator, MacroOperator, Call, Context} = alias://core
  
  CatalogMacro
)

suite(__filename, proc()
  const (
    operator = MacroOperator()
    dataset = GlobalDataset(name = "global")
    log = simulator.stream.duplex()
    ctx = Context(log = nop)
    onError = "carryOn"
    title = "testing"
  )

  suite("isLoop()", proc()
    test("when forEach set, true must be returned", proc()
      # (1) act
      const (
        ops = Ops()
        forEach = "list onw two three"
        steps = []
        macro = CatalogMacro(name = "test", forEach, steps, ops, operator)
        out = macro.isLoop()
      )

      # (2) assessment
      expected(out).equalTo(true)
    end)

    test("when forEach unset, false must be returned", proc()
      # (1) act
      const (
        ops = Ops()
        steps = []
        macro = CatalogMacro(name = "test", steps, ops, operator)
        out = macro.isLoop()
      )

      # (2) assessment
      expected(out).equalTo(false)
    end)
  end)

  suite("buildSteps()", proc()
    test("when decls are alright, a list with the steps must be returned", proc()
      # (1) act
      const (
        cp = Action(name = "cp", fun = nop, operator = ActionOperator())
        exec = Action(name = "exec", fun = nop, operator = ActionOperator())
        ops = Ops().appendOp(cp).appendOp(exec)
        steps = [
          "cp"
          ["<cp", "$(src)", "$(dst)"]
          ["$result", "cp", "$(src2)", "$(dst2)"]
          {log = "cp"}
          {log = ["cp", "$(src)", "$(dst)"]}
          {quiet = "cp"}
          {step = "cp"}
          {run = "redis-cli ping"}
          {sudo = "docker ps"}
        ]
        macro = CatalogMacro(name = "test", steps, ops, operator)
        call = Call(op = macro, dataset, onError, title, log, ctx)
        out = macro.getSteps(call)
      )

      # (2) assessment
      expected(out).toBeList().toHaveLen(9)

      expected(out[0]).toBeMap().member("op").toBe(Action)

      expected(out[1]).toBeMap().toHave(
        onError = "finish"
        resultVarName = "last"
        quiet = false
        resultLog = false
        args = ["$(src)", "$(dst)"]
      ).member("op").toBe(Action)

      expected(out[2]).toBeMap().toHave(
        onError = "carryOn"
        resultVarName = "result"
        quiet = false
        resultLog = false
        args = ["$(src2)", "$(dst2)"]
      ).member("op").toBe(Action)
      
      expected(out[3]).toBeMap().toHave(
        onError = "carryOn"
        resultVarName = "last"
        quiet = false
        resultLog = true
        args = nil
      ).member("op").toBe(Action)

      expected(out[4]).toBeMap().toHave(
        onError = "carryOn"
        resultVarName = "last"
        resultLog = true
        quiet = false
        args = ["$(src)", "$(dst)"]
      ).member("op").toBe(Action)

      expected(out[5]).toBeMap().toHave(
        onError = "carryOn"
        resultVarName = "last"
        resultLog = false
        quiet = true
        args = nil
      ).member("op").toBe(Action)

      expected(out[6]).toBeMap().member("op").toBe(Action)

      expected(out[7])\
        .toBeMap().toHave(args = ["redis-cli", "ping"])\
        .member("op").toBe(Action).toHave(name = "exec")

      expected(out[8])\
        .toBeMap().toHave(args = ["sudo", "docker", "ps"])\
        .member("op").toBe(Action).toHave(name = "exec")
    end)
  end)

  suite("getInitializerSteps()", proc()
    test("when called, the steps must be built and returned", proc()
      # (1) act
      const (
        cpOp = Action(name = "cp", fun = nop, operator = ActionOperator())
        ops = Ops().appendOp(cpOp)
        macro = CatalogMacro(name = "test", initializers = ["cp"], steps = [], ops, operator)
        call = Call(op = macro, dataset, onError, title, log, ctx)
        out = macro.getInitializerSteps(call)
      )

      # (2) assessment
      expected(out).toHaveLen(1)
      expected(out[0].op).toBe(Action)
    end)
  end)

  suite("getFinalizerSteps()", proc()
    test("when called, the steps must be built and returned", proc()
      # (1) act
      const (
        cpOp = Action(name = "cp", fun = nop, operator = ActionOperator())
        ops = Ops().appendOp(cpOp)
        macro = CatalogMacro(name = "test", finalizers = ["cp"], steps = [], ops, operator)
        call = Call(op = macro, dataset, onError, title, log, ctx)
        out = macro.getFinalizerSteps(call)
      )

      # (2) assessment
      expected(out).toHaveLen(1)
      expected(out[0].op).toBe(Action)
    end)
  end)

  suite("getLoopCollection()", proc()
    test("when called, a list must be returned", proc()
      # (1) act
      const (
        op = Action(name = "list", fun = nop, operator = ActionOperator())
        ops = Ops().appendOp(op)
        forEach = ["list", "file1", "file2"]
        steps = []
        loop = CatalogMacro(name = "test", forEach, steps, ops, operator)
        call = Call(op = loop, dataset, onError, title, log, ctx)
        out = loop.getLoopCollection(call)
      )

      # (2) assessment
      expected(out).toBeMap().toHave(
        args = ["file1", "file2"]
        onError = "carryOn"
        resultVarName = "i"
      ).member("op").toBe(Action)
    end)
  end)
end)