/**
 * A mixer of catalog declarations, that is,
 * a component to merge several catalog declarations.
 */
@abstract
export struct CatalogMerger
  /**
   * Mixes a given extensor declaration from an other extended declarations.
   */
  pub fn merge(extensor: map, ...extendeds: map) -> decl: map
    decl = copy(extendeds[0])

    for each ext in extendeds[1, -1].concat(extensor) do
      for each field, value in ext do
        with field do
          if "dataset" then self.mergeDataset(value, decl)
          if "plugins" then self.mergePlugins(value, decl)
          if "jobs" then self.mergeJobs(value, decl)
          else decl[field] = value

  /**
   * Mixes a given dataset declaration into a catalog declaration.
   */
  @hidden
  pub fn mergeDataset(dataset: any[], decl: map) -> decl
    # (1) prepare dataset in declaration to extend
    decl.dataset ?= []

    # (2) mix data into declaration
    for each datum in dataset do
      #remove datum if already exists
      const (
        datumName = getDatumName(datum)
        ix = decl.dataset.findIndex(fn(decl) = getDatumName(decl) == datumName end)
      )

      if ix >= 0 then
        decl.dataset.splice(ix, 1)
      
      #add datum to current dataset
      decl.dataset.push(datum)
  
  /**
   * Mixes a given plugins declaration into a catalog declaration.
   */
  @hidden
  pub fn mergePlugins(pis: any[], decl: map) -> decl
    # (1) prepare plugins in declaration to extend
    decl.plugins ?= []

    # (2) mix plugins into declaration
    for each pi in pis do
      #remove plugin if already exists
      const (
        piName = getPluginName(pi)
        ix = decl.plugins.findIndex(fn(decl) = getPluginName(decl) == piName end)
      )

      if ix >= 0 then
        decl.plugins.splice(ix, 1)

      #add plugin to current plugins
      decl.plugins.push(pi)
  
  /**
   * Mixes a given jobs declaration into a catalog declaration.
   */
  @hidden
  pub fn mergeJobs(jobs: any[], decl: map) -> decl
    # (1) prepare jobs in declaration to extend
    decl.jobs ?= []

    # (2) mix jobs into declaration
    for each job in jobs do
      #remove job if already exists
      const (
        jobName = getJobName(job)
        ix = decl.jobs.findIndex(fn(decl) = getJobName(decl) == jobName end)
      )

      if ix >= 0 then
        decl.jobs.splice(ix, 1)

      #add job to current jobs
      decl.jobs.push(job)
  
/**
 * Returns the name of a given datum declaration.
 */
fn getDatumName(decl: map) = decl.var ?? decl.const ?? decl.fn

/**
 * Returns the name of a given plugin declaration.
 */
fn getPluginName(decl: map) = decl.plugin

/**
 * Returns the name of a given job declaration.
 */
fn getJobName(decl: map) = decl.macro ?? decl.loop ?? decl.co