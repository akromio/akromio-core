use (
  CatalogItemParseOpts
)

/**
 * Base for the items of a catalog.
 *
 * These items can be, attending to the catalog type, for example,
 * jobs or stages.
 */
@abstract
export struct CatalogItemParser
  /**
   * Returns the name of the catalog items such as, for example, job o stage.
   */
  @abstract
  pub const itemName: text

  /**
   * Parses a catalog item [decl]aration, returning a map with its item(s).
   *
   * Remember a group is an item to define several items with a same tag.
   * For this reason, this method returns a map of items, where each field
   * of this map represents an item.
   */
  pub fn parse(decl: map, opts: CatalogItemParseOpts) -> items: map
    if "group" in decl then
      for each item in self.parseGroup(decl, opts) do
        items[item.name] = item
    else
      const item = self.parseItem(decl, opts)
      items[item.name] = item
  
  /**
   * Parses a given item [decl]aration, returning its instance.
   */
  @abstract
  pub fn parseItem(decl: map, opts: CatalogItemParseOpts): CatalogItem
  
  /**
   * Parses a group declaration, returning a list with the items.
   */
  @hidden
  pub fn parseGroup(decl: map, opts: CatalogItemParseOpts) -> items: list
    # (1) get tag to set in the items
    const tag = decl.group

    # (2) parse the items
    for each item := decl[self.itemName + "s"] do
      if ds ::= decl.dataset then item = item{*, dataset = ds.concat(item.dataset ?? [])}
      item = self.parseItem(item, opts)
      item.tags.push(tag)
      items.push(item)
