use (
  dep://array-shuffle

  ../../../ring/Ring
  ../../Assigner
)

/**
 * An assigner to assign the jobs randomly.
 */
export struct RandomAssigner: Assigner
  /**
   * Ring with the possible assignees.
   */
  pub const ring: Ring

  /**
   * Current assignation order.
   */
  @hidden @strict
  pub var assignationOrder = []

  /**
   * @dev
   * The job weights must sum 100.
   */
  @post
  pvt proc post()
    # (1) calculate the total weight
    var total = 0

    for each assign in self.assignations do
      total += assign.weight
    
    # (2) check total weight
    if total != 100 then
      throw(TypeError($"Sum of assignation weights must be 100. Got: ${total}."))

  @override @noParamCheck
  pub fn assign(blankSheet: BlankSheet) = if blankSheet.job then
    self.assignInternalJob(blankSheet)
  else
    self.assignToOne(blankSheet)
  end
  
  /**
   * Performs an internal assignation to one or several destinations,
   * attending to the operation.
   */
  @hidden @noParamCheck
  pub fn assignInternalJob(blankSheet: BlankSheet) -> reqs: list
    if blankSheet.job == "__exit__" then
      const assignTs = timestamp().valueOf()

      for each assignee in self.ring.points do
        reqs.push(blankSheet{*, assignTs, assignee})

  /**
   * Performs an assignation to the next destination.
   */
  @hidden @noParamCheck
  pub fn assignToOne(blankSheet: BlankSheet): RunReq
    # (1) generate a new assignation batch if needed
    if len(self.assignationOrder) == 0 then
      self.assignationOrder = self.generateAssignationOrder()
    
    # (2) determine assignation
    const (
      assignation = self.assignationOrder.pop()
      assignee = self.ring.next()
    )

    return assignation{*, -weight, ...blankSheet, assignTs = timestamp().valueOf(), assignee}

  /**
   * Generates an assignation order for 100 assignations,
   * attending to the weights.
   */
  @hidden
  pub fn generateAssignationOrder() -> order: list
    # (1) generate order
    for each assign in shuffle(self.assignations) do
      for i = 0; i < assign.weight; i += 1 do
        order.push(assign)

    # (2) perform final shuffle
    order = shuffle(order)
