use (
  alias://expected
  {sim} = alias://doubles
  Assigner
)

suite(__filename, proc()
  const (
    registry = "fs:///my/registry"
    catalog = "catalog-name"
    job = "job-name"
  )

  suite("constructor", proc()
    test("when total weight is not 100, error must be raised", proc()
      # (1) act
      const (
        jobs = [{registry, catalog, job, weight = 90}, {registry, catalog, job, weight = 20}]
        opts = {input = sim.stream.readable(), output = sim.stream.duplex(), jobs}
        out = peval(Assigner(opts))
      )

      # (2) assessment
      expected(out).it(0).equalTo(false).it(1).equalTo(TypeError("Sum of job weights must be 100. Got: 110."))
    end)
  end)

  suite("start()", proc()
    test("when started, run requests must be generated", async proc()
      # (1) act
      const (
        blankSheets = ["one", "two", "three"]
        jobs = [{registry, catalog, job, weight = 25}, {registry, catalog, job, weight = 75}]
        opts = {input = sim.stream.readable(data = blankSheets), output = sim.stream.duplex(), jobs}
        assigner = Assigner(opts)
        out = []
      )

      assigner.start()
      await(sleep("1s"))

      # (2) assessment
      expected(out).equalTo([])
    end)
  end)
end)
