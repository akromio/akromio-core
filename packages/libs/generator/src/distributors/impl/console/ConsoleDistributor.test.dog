use (
  alias://expected
  {sim, monitor, fun, method} = alias://doubles

  ConsoleDistributor
)

suite(__filename, proc()
  suite("deliver()", proc()
    test("when called, message must be sent to stream", async proc()
      # (1) act
      const (
        ts = timestamp().valueOf()
        assignTs = ts
        reqs = [
          {ts, assignTs, job = "job1", assignee = "cavani1"}
          {ts, assignTs, job = "job2", assignee = "cavani2"}
          {ts, assignTs, job = "job3", assignee = "cavani3"}
        ]
        input = sim.stream.readable(objectMode = true, data = reqs)
        console = monitor(fun())
        distributor = ConsoleDistributor(console=, input)
      )

      await(distributor.start())

      # (2) assessment
      const clog = monitor.log(console, clear = true)
      expected(clog.calls).equalTo(3)
      for i = 0; i < clog.calls; i += 1 do
        expected(clog.getCall(i).args[0]).like("\\[.+\\] cavani. ts:.+ assignTs:.+ job:job.")
    end)
  end)
end)
