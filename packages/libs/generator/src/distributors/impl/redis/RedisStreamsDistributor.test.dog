use (
  alias://expected
  {sim, monitor, method} = alias://doubles

  RedisStreamsDistributor
)

suite(__filename, proc()
  const (
    registry = "registry"
    catalog = "catalog-name"
  )

  suite("deliver()", proc()
    test("when called, message must be sent to stream", async proc()
      # (1) act
      const (
        ts = timestamp().valueOf()
        assignTs = ts
        reqs = [
          {ts, assignTs, registry, catalog, job = "job1", assignee = "cavani1"}
          {ts, assignTs, registry, catalog, job = "job2", assignee = "cavani2"}
          {ts, assignTs, registry, catalog, job = "job3", assignee = "cavani1"}
        ]
        input = sim.stream.readable(objectMode = true, data = reqs)
        redis = monitor(
          sim(
            sendCommand = method.resolves()
            connect = method.resolves()
            disconnect = method.resolves()
          )
        )
        distributor = RedisStreamsDistributor(input=, redis)
      )

      await(distributor.start())

      # (2) assessment
      const mlog = monitor.log(redis, clear = true)
      expected(mlog.calls).equalTo(5)
      expected(mlog.getCall(0).args).equalTo([])  # connect()
      expected(mlog.getCall(1).args).equalTo([["XADD", "cavani1", "*", "req", json.encode(reqs[0])]])
      expected(mlog.getCall(2).args).equalTo([["XADD", "cavani2", "*", "req", json.encode(reqs[1])]])
      expected(mlog.getCall(3).args).equalTo([["XADD", "cavani1", "*", "req", json.encode(reqs[2])]])
      expected(mlog.getCall(4).args).equalTo([])  # disconnect()
    end)
  end)
end)
