use (
  alias://expected
  {GlobalDataset} = alias://dataset
  {interceptor, method} = alias://doubles
  {Engine as EngineBase, Runner, Ops, StaticAction, ActionOperator, Result, PluginParser} = ~
)

#The engine type to test.
struct Engine: EngineBase
  @override @hidden
  pub fn runOp(op, args?, opts) = Result(
    callId = "123e4567-e89b-12d3-a456-426614174000"
    title = "This is the title"
    duration = 0
    kind = "ok"
    value = 1234
    onError = "carryOn"
  )

suite(__filename, proc()
  const (
    dataset = GlobalDataset(name = "global")
    action = StaticAction(name = "myaction", fun = nop, operator = ActionOperator())
    ops = Ops().appendOp(action)
    pluginParser = PluginParser()
  )

  fn createEngine(ops?) = Engine(
    onError = "carryOn"
    dataset
    pluginParser
    ops
  )

  suite("getBuiltInPresets()", proc()
    test("when not overwritten, empty list must be returned", proc()
      # (1) act
      const (
        engine = createEngine()
        out = engine.getBuiltInPresets()
      )

      # (2) assessment
      expected(out).toBeEmpty()
    end)
  end)

  suite("loadBuiltInPlugins()", proc()
    test("when presets returned, these must be parsed and their plugins added to ops", async proc()
      # (1) act
      const (
        pi1 = {
          plugin = "pi1"
          ops =
            op11 = {fun = nop}
            op12 = {fun = nop}
        }

        pi2 = {
          plugin = "pi2"
          ops =
            op21 = {fun = nop}
            op22 = {fun = nop}
        }

        preset = {
          name = "test-preset"
          tags = ["test"]
          plugins = [
            {plugin = pi1.name, impl = pi1}
            {plugin = pi2.name, impl = pi2}
          ]
        }

        engine = interceptor(
          createEngine()
          getBuiltInPresets = method.returns([preset])
        )

        out = await(engine.loadBuiltInPlugins())
      )

      # (2) assessment
      expected(out).sameAs(engine)
      expected(out.ops).toHaveLen(4)

      for each name in ["pi1.op11", "pi1.op12", "pi2.op21", "pi2.op22"] do
        expected(out.ops.getOp(name)).toBe(StaticAction)
    end)
  end)

  suite("run()", proc()
    test("when operation not found, error must be raised", async proc()
      # (1) act
      const (
        engine = createEngine()
        out = pawait(engine.run("myaction"))
      )

      # (2) assessment
      expected(out)\
        .it(0).equalTo(false)\
        .it(1).equalTo(Error("Operation 'myaction' not found."))
    end)

    test("when operation not found, error must be raised", async proc()
      # (1) act
      const (
        engine = createEngine(ops)
        out = pawait(engine.run("myaction", ["arg1", "arg2"], {onError = "finish"}))
      )

      # (2) assessment
      expected(out)\
        .it(0).equalTo(true)\
        .it(1).toBe(Result)
    end)
  end)
end)