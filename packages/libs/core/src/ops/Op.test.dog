use (
  alias://expected
  {simulator, monitor, method} = alias://doubles
  {GlobalDataset} = alias://dataset

  Op
)

struct TestOp: Op

suite(__filename, proc()
  const (
    globalDataset = GlobalDataset(name = "global")
    logStream = simulator.stream.duplex()
    runnerName = "runner#0"
  )

  suite("runWith()", proc()
    test("when called, operator must run the action and return its returned value", proc()
      # (1) act
      const (
        operator = monitor(
          simulator(run = method({resolves = 321}))
          onlyCalls = true
        )

        op = TestOp(name = "test", operator)
        opts = {title = "the title", dataset = globalDataset, log = logStream, runnerName}
        out = op.runWith(123, opts)
      )

      # (2) assessment
      const log = monitor.log(operator, clear = true)
      expected(log).toHaveLen(1)
      expected(log.calledWith([op, 123, opts])).equalTo(1)
    end)
  end)

  suite("run()", proc()
    test("when called, runWith() called with args to nil", proc()
      # (1) act
      const (
        operator = monitor(
          simulator(run = method({resolves = 321}))
          onlyCalls = true
        )

        op = TestOp(name = "test", operator)
        opts = {title = "the title", dataset = globalDataset, log = logStream, runnerName}
        out = op.run(opts)
      )

      # (2) assessment
      const log = monitor.log(operator, clear = true)
      expected(log).toHaveLen(1)
      expected(log.calledWith([op, nil, opts])).equalTo(1)
    end)
  end)
end)
