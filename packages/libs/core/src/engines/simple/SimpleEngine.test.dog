use (
  alias://expected
  {GlobalDataset} = alias://dataset
  {monitor, simulator, field, method} = alias://doubles

  SimpleEngine
  ../Runner
  ../../ops/{Ops, Result}
  ../../ops/simple/action/{StaticAction, ActionOperator}
  ../../plugins/PluginParser
)

suite(__filename, proc()
  const (
    dataset = GlobalDataset(name = "global")
    pluginParser = PluginParser()
  )

  suite("runOp()", proc()
    test("when called, the op must be run and returned its result", async proc()
      # (1) act
      const (
        action = StaticAction(name = "myaction", fun = nop, operator = ActionOperator())
        ops = Ops().appendOp(action)
        result = Result(
          callId = "123e4567-e89b-12d3-a456-426614174000"
          title = "This is the title"
          duration = 0
          kind = "ok"
          value = 1234
          onError = "carryOn"
        )
        runner = monitor(
          simulator(
            Runner
            run = method.resolves(result)
            log = field.stream.duplex()
          )
        )
        engine = SimpleEngine(runner=, onError = "carryOn", dataset, ops, pluginParser)
        out = await(engine.run({jobName = "myaction"}))
      )

      # (2) assessment
      expected(out).sameAs(result)
    end)

    test("when called w/ args, the op must be run and returned its result", async proc()
      # (1) act
      const (
        action = StaticAction(name = "myaction", fun = nop, operator = ActionOperator())
        ops = Ops().appendOp(action)
        result = Result(
          callId = "123e4567-e89b-12d3-a456-426614174000"
          title = "This is the title"
          duration = 0
          kind = "ok"
          value = 1234
          onError = "carryOn"
        )
        runner = monitor(
          simulator(
            Runner
            run = method.resolves(result)
            log = field.stream.duplex()
          )
        )
        engine = SimpleEngine(runner=, onError = "carryOn", dataset, ops, pluginParser)
        out = await(engine.run({jobName = "myaction", args = ["arg1", "arg2"]}, {onError = "finish"}))
      )

      # (2) assessment
      expected(out).sameAs(result)
    end)
  end)
end)
