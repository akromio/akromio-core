use (
  Plugin
  ../ops/simple/action/{StaticAction, ActionOperator}
)

/**
 * Action operator to use with the plugin operations.
 */
const actionOperator = ActionOperator()

/**
 * Function to wrap the operation functions for ensuring the
 * execution of the initialization on stateful plugins.
 */
fn wrapOpFunWithIni(plugin: Plugin, ini: func, iniArgs?, fun: func) = async fn(...args)
  # (1) initialization if for the first time
  if not plugin.initialized then
    plugin.state = await(ini(iniArgs))
    plugin.initialized = true
  
  # (2) run op function returning it result
  return fun(args[0]{*, state = plugin.state}, ...args[1, -1])
end

/**
 * A parser for parsing plugin declarations.
 */
export struct PluginParser
  /**
   * Parses a plugin declaration, returning its corresponding plugin instance.
   */
  pub async fn parsePlugin(decl: map, iniArgs?: any) -> plugin: Plugin
    # (1) create plugin
    const (
      name = decl.plugin
      initializer = decl.ini
      finalizer = decl.fin
    )

    plugin = Plugin(decl{*, -ops, name, finalizer})

    # (2) add its operations
    for each name, opDecl in decl.ops do
      if initializer then
        const fun = wrapOpFunWithIni(plugin, initializer, iniArgs, opDecl.fun)

        plugin.state = {}
        plugin.appendOp(StaticAction(opDecl{*, fun, name, operator = actionOperator}))
      else
        plugin.appendOp(StaticAction(opDecl{*, name, operator = actionOperator}))
  
  /**
   * Parses a preset declaration, returning its corresponding plugin
   * instances.
   */
  pub async fn parsePreset(preset: map) -> plugins: list
    for each def in preset.plugins do
      plugins.push(await(self.parsePlugin(def.impl, def.iniArgs)))
