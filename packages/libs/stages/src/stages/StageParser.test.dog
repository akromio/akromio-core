use (
  alias://expected
  StageParser, ConstStage, IncStage, SleepStage
)

suite(__filename, proc()
  const (
    parser = StageParser()
    parseOpts = {}
  )

  suite("parseStage()", proc()
    suite("const", proc()
      test("when valid declaration, a ConstStage must be returned", proc()
        # (1) act
        const (
          jobs = []
          decl = {
            'const' = "warmup"
            duration = "2m"
            interval =
              duration = "2s"
              requests = 100
            jobs
          }

          out = parser.parse(decl, parseOpts)
        )

        # (2) assessment
        expected(out.warmup).toBe(ConstStage).toHave(
          name = "warmup"
          duration = 120000
          jobs
          interval = {
            duration = 2000
            requests = 100
          }
        )
      end)
    end)

    suite("inc", proc()
      test("when valid declaration, a IncStage must be returned", proc()
        # (1) act
        const (
          jobs = []
          decl = {
            inc = "load"
            duration = "2m"
            jobs
            interval =
              duration = "2s"
              requests = 100
              inc = 0.5
          }

          out = parser.parse(decl, parseOpts)
        )

        # (2) assessment
        expected(out.load).toBe(IncStage).toHave(
          name = "load"
          duration = 120000
          jobs
          interval = {
            duration = 2000
            requests = 100
            inc = 0.5
          }
        )
      end)
    end)

    suite("sleep", proc()
      test("when valid declaration, a SleepStage must be returned", proc()
        # (1) act
        const (
          jobs = []
          decl = {sleep = "pause", duration = 120000}
          out = parser.parse(decl, parseOpts)
        )

        # (2) assessment
        expected(out.pause).toBe(SleepStage).toHave(
          name = "pause"
          duration = 120000
        )
      end)
    end)
  end)
end)
