use (
  {ms} = util
  {CatalogItemParser, CatalogItemParseOpts} = alias://catalog

  ConstStage, ExitStage, IncStage, SleepStage
)

/**
 * Parse options.
 */
type ParseOpts = CatalogItemParseOpts

/**
 * A parser of stage declarations.
 */
export struct StageParser: CatalogItemParser
  @override
  pub const itemName = "stage"

  @override @hidden
  pub fn parseItem(decl: map, opts: ParseOpts) = self.parseStage(decl, opts)
  
  /**
   * Parses a stage [decl]aration, returning its stage instance.
   */
  pub fn parseStage(decl: map, opts: ParseOpts) -> stage: Stage
    if "const" in decl then stage = self.parseConstStage(decl, opts)
    else if "inc" in decl then stage = self.parseIncStage(decl, opts)
    else if "sleep" in decl then stage = self.parseSleepStage(decl, opts)
    else if "exit" in decl then stage = self.parseExitStage(decl, opts)
    else stage = self.parseAddOnStage(decl, opts)
  
  /**
   * Parses an add-on stage, that is, a specific job of the package in use.
   */
  @hidden
  pub fn parseAddOnStage(decl: map, _: ParseOpts)
    throw(TypeError($"Invalid stage declaration: ${fmt(decl)}."))
  
  /**
   * Parses a const stage [decl]aration.
   */
  @hidden
  pub fn parseConstStage(decl: map, _: ParseOpts) = ConstStage(
    decl{
      *
      name = decl.const
      duration = ms(decl.duration)
      interval = decl.interval{*, duration = ms(decl.interval.duration or "1s")}
    }
  )

  /**
   * Parses an incremental stage [decl]aration.
   */
  @hidden
  pub fn parseIncStage(decl: map, _: ParseOpts) = IncStage(
    decl{
      *
      name = decl.inc
      duration = ms(decl.duration)
      interval = decl.interval{*, duration = ms(decl.interval.duration or "1s")}
    }
  )

  /**
   * Parses a sleep stage [decl]aration.
   */
  @hidden
  pub fn parseSleepStage(decl: map, _: ParseOpts) = SleepStage(
    decl{
      *
      name = decl.sleep
      duration = ms(decl.duration)
    }
  )

  /**
   * Parses an exit stage [decl]aration.
   */
  @hidden
  pub fn parseExitStage(decl: map, _: ParseOpts) = ExitStage(
    decl{
      *
      name = decl.exit
      duration = ms(decl.duration)
    }
  )
