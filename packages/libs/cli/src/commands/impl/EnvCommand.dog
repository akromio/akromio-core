use (
  term = dep://term-size
  {table, tableOpts} = ../../helpers/table
  ../Command
)

/**
 * The prefix to use in the variables.
 */
const prefix = "KRM_"

/**
 * The env command.
 */
export struct EnvCommand: Command
  @override
  pub const name := ["env", "e"]

  @override
  pub const desc := "Show the run environment."

  @override
  pub const positionals := {}

  @override
  pub const options := {}

  @override @hidden
  pub proc handle()
    self.printRows(self.buildRows())
    ps.exit(0)
  
  /**
   * Prints the table with the environment variable [rows].
   */
  @hidden
  pub proc printRows(rows: list)
    # (1) determine var width and initial value width
    var (
      totalWidth ::= term().columns - 10
      varWidth = 0
      valueWidth = 0
    )

    for each row in rows do
      if width ::= len(row[0]); width > varWidth then
        varWidth = width
      
      if width ::= len(row[1]); width > valueWidth then
        valueWidth = width
    
    # (2) determine value and desc widths
    const col2Width = Math.floor((totalWidth - varWidth) / 2)

    if valueWidth > col2Width then
      valueWidth = col2Width
    
    const config = tableOpts{
      *

      columns = [
        {width = varWidth}
        {width = valueWidth}
        {width = totalWidth - varWidth - valueWidth}
      ]
    }

    # (3) show table
    print()
    print(table(rows, config))

  /**
   * Lists and returns the environment variables related with this tool.
   */
  @hidden
  pub fn buildRows() -> rows: list
    # (1) build var descriptions
    const vars = {
      ANSWERS_LOG =
        desc = "Print the answers for their reuse: options or file."

      DIR_NAME =
        desc = "The dir name where the akromio data is."
      
      ENV_FILE =
        desc = "The .env file to load when started. Relative to $DIR_NAME."
      
      PRIVATE_ENV_FILE =
        desc = "The .private.env file to load when started. Relative to $DIRNAME."
      
      APM_DIR_NAME =
        desc = "The dir name where the apm catalogs are installed. Relative to $DIR_NAME."
        
      JOB_CATALOGS_PATH =
        desc = "The dir path to prefix when root job catalog name is relative."
      
      JOB_CATALOG_NAME =
        desc = "The catalog name to use when unset."
      
      JOB_NAME =
        desc = "The default job name to run when unset."

      REGISTRIES =
        desc = "The available registries to use in order, separated by commas."
      
      REGISTRY_GIT_HOST =
        desc = "The host where the Git repository is."
      
      REGISTRY_GIT_USER =
        desc = "The user name where the Git repository is."
      
      REGISTRY_GIT_BRANCH =
        desc = "The branch name to use."
      
      REGISTRY_SKYNET_PORTAL =
        desc = "The Skynet portal (w/o https://) to use when unset."
      
      REGISTRY_SKYNET_SKYLINK =
        desc = "The skylink to use when unset."
      
      REGISTRY_SNS_PORTAL =
        desc = "The Skynet portal (w/o https://) to use when unset."
      
      REGISTRY_SNS_PUBLIC_KEY =
        desc = "The Skynet registry public key to use when unset."
      
      REGISTRY_SNS_NAME =
        desc = "The SNS name to use when unset."
      
      REGISTRY_HTTP_HOST =
        desc = "The host (w/o https://) to use when unset."
      
      REGISTRY_HTTP_BASE =
        desc = "The base path to prefix when HTTP registry used."
      
      NODE_PATH =
        desc = "The paths where the assets (plugins, catalogs...) are installed with NPM."
    }

    # (2) build rows
    rows = [
      ["Variable", "Value", "Desc."]
      [prefix + "ARG_*", "", "The arguments to pass from environment variables."]
      [prefix + "ANSWER_*", "", "The answers to pass from environment variables."]
    ]
    
    for each name, item := vars do
      name = prefix + name
      rows.push([name, ps.env[name] ?? "", item.desc])
