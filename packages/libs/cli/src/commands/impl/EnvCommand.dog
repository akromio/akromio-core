use (
  term = dep://term-size
  {table, tableOpts} = ../../helpers/table
  ../Command
)

/**
 * The prefix to use in the variables.
 */
const prefix = "KRM_"

/**
 * The env command.
 */
export struct EnvCommand: Command
  @override
  pub const name := ["env [pattern]", "e"]

  @override
  pub const desc := "Show the run environment."

  @override
  pub const positionals := {
    pattern =
      type = "string"
      desc = "Variable pattern to use."
      default = "*"
  }

  @override
  pub const options := {}

  @override @hidden
  pub proc handle(argv=> {pattern})
    self.printRows(self.buildRows(pattern))
    ps.exit(0)
  
  /**
   * Prints the table with the environment variable [rows].
   */
  @hidden
  pub proc printRows(rows: list)
    # (1) determine var width and initial value width
    var (
      totalWidth ::= term().columns - 10
      varWidth = 0
      valueWidth = 0
    )

    for each row in rows do
      if width ::= len(row[0]); width > varWidth then
        varWidth = width
      
      if width ::= len(row[1]); width > valueWidth then
        valueWidth = width
    
    # (2) determine value and desc widths
    const col2Width = Math.floor((totalWidth - varWidth) / 2)

    if valueWidth > col2Width then
      valueWidth = col2Width
    
    const config = tableOpts{
      *

      columns = [
        {width = varWidth}
        {width = valueWidth}
        {width = totalWidth - varWidth - valueWidth}
      ]
    }

    # (3) show table
    print()
    print(table(rows, config))

  /**
   * Lists and returns the environment variables related with this tool.
   */
  @hidden
  pub fn buildRows(pattern: text) -> rows: list
    # (1) build variables
    const (
      commonVars = self.buildCommonVars()
      specializationVars = self.buildSpecializationVars()
      vars = {...commonVars, ...specializationVars}
    )

    # (2) build rows
    pattern = re(pattern.replace(re("\\*", "g"), ".*"))
    rows = [["Variable", "Value", "Desc."]]

    for each name in keys(vars).sort() do
      if prefixedName ::= prefix + name; pattern.test(prefixedName) then
        const {desc} = vars[name]
        rows.push([prefixedName, ps.env[prefixedName] ?? "", desc])

  @hidden
  pub fn buildCommonVars() = {
    'ARG_*' =
      desc = "Arguments to pass from environment variables."
    
    DIR_NAME =
      desc = "Dir name where the akromio data is."
    
    ENV_FILE =
      desc = ".env file to load when started. Relative to $DIR_NAME."
    
    PRIVATE_ENV_FILE =
      desc = ".private.env file to load when started. Relative to $DIRNAME."
    
    APM_DIR_NAME =
      desc = "Dir name where the apm catalogs are installed. Relative to $DIR_NAME."
      
    REGISTRIES =
      desc = "Available registries to use in order, separated by commas."
    
    REGISTRY_GIT_HOST =
      desc = "Host where the Git repository is."
    
    REGISTRY_GIT_USER =
      desc = "User name where the Git repository is."
    
    REGISTRY_GIT_REPO =
      desc = "Repository name to use as registry."
    
    REGISTRY_GIT_BRANCH =
      desc = "Branch name to use."
    
    REGISTRY_GIT_PREFIX =
      desc = "Path prefix to use."
    
    REGISTRY_SKYNET_PORTAL =
      desc = "Skynet portal (w/o https://) to use when unset."
    
    REGISTRY_SKYNET_SKYLINK =
      desc = "Skylink to use when unset."
    
    REGISTRY_SNS_PORTAL =
      desc = "Skynet portal (w/o https://) to use when unset."
    
    REGISTRY_SNS_PUBLIC_KEY =
      desc = "Skynet registry public key to use when unset."
    
    REGISTRY_SNS_NAME =
      desc = "SNS name to use when unset."
    
    REGISTRY_HTTP_HOST =
      desc = "Host (w/o https://) to use when unset."
    
    REGISTRY_HTTP_BASE =
      desc = "Base path to prefix when HTTP registry used."
    
    NODE_PATH =
      desc = "Paths where the assets (plugins, catalogs...) are installed with NPM."
  }

  /**
   * Returns the specialization variables.
   */
  @hidden
  pub fn buildSpecializationVars() = {}
