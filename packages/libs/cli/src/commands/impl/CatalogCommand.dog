use (
  {Ops} = alias://core
  {table, tableOpts} = ../../helpers/table
  ../CatalogCommandBase
)

/**
 * The options defined in the super types.
 */
const {baseOptions} = CatalogCommandBase

/**
 * Base for the catalog command, that is, a command to show
 * its items such as, for example, jobs or stages.
 */
@abstract
export struct CatalogCommand: CatalogCommandBase
  @override
  pub const name := ["catalog", "cat", "c", "*"]

  @override
  pub const positionals := {}

  @override
  pub const options := {
    {registries} = baseOptions
    {catalogName} = baseOptions
    {registryAndCatalogName} = baseOptions
    {arg} = baseOptions
    
    desc =
      type = "boolean"
      desc = "Show the catalog description if available."
      default = false
    
    all =
      type = "boolean"
      alias = ["l"]
      desc = "Show all the items, including these with hidden tag."
      default = false
    
    tag =
      type = "string"
      alias = ["t"]
      desc = "Show the items with a given tag."
  }

  /**
   * Item name.
   */
  @abstract
  pub const itemName: text

  /**
   * Creates the item parser to use.
   */
  @abstract
  pub fn createItemParser(): CatalogItemParser

  @override @hidden
  pub async proc handle(argv=> {catalogName, registryAndCatalogName, all, tag, args, desc})
    #(1) create the registry instances to use
    const registries = await(self.createRegistries(argv).connect())

    do
      #(2) determine the catalogName
      if registryAndCatalogName then
        catalogName = registryAndCatalogName.split("://")[1]
      
      #(3) get the catalog decl
      var decl
      
      catalogName = self.buildCatalogPath(catalogName)
      decl = await(self.readCatalogDecl(catalogName, registries))

      if not decl then
        print($"Catalog '${catalogName}' not found in '${registries.registryNames}'.")
        ps.exit(1)

      #(4) list
      const (
        {itemName} = self
        itemsField = itemName + "s"
        defaultItemNameField = "default" + itemName[0].toUpperCase() + itemName[1, -1] + "Name"
      )

      print("\nlocation:", decl.loc)
      showCatalogDesc(decl, desc)
      self.listItemDecls(decl[itemsField] ?? [], decl[defaultItemNameField], tag, all)
    finally
      await(registries.disconnect())

  /**
  * Lists the item declarations.
  */
  @hidden
  pub proc listItemDecls(decls: map[], defaultItemName?: text, tag?: text, all: bool)
    #(1) get the data to show
    const (
      data = {}
      ops = Ops()
      itemParser = self.createItemParser()
    )

    for each decl in decls do
      for each name, item in itemParser.parse(decl, ops=) do
        if all then
          data[name] = item
        else if tag then
          if item.tags.includes(tag) then
            data[name] = item
        else
          if item.tags.includes("hidden") then nop
          else data[name] = item
    
    #(2) create rows to show
    const (
      {itemName} = self
      rows = [[itemName, "type", "tags", "desc."]]
    )

    for each key in keys(data).sort() do
      var (
        item ::= data[key]
        name ::= key + if key == defaultItemName then "*" else "" end
        opType
      )

      with type(item) do
        if "Macro" then opType = "macro"
        if "Co" then opType = "co"
        if "Script" then opType = "script"
      
      rows.push([name, opType, item.tags, item.desc or item.title])

    #(3) show table
    print($"\n${itemName}s:")
    print(table(rows, tableOpts))

/**
 * Shows a given catalog description if requested.
 */
proc showCatalogDesc(catalog: map, show: bool)
  if show then
    if extends ::= catalog.extends; len(extends) > 0 then
      print("\nExtends:", extends.join(", "))

    if desc ::= catalog.desc then
      print("\nDescription:")
      print(desc)
