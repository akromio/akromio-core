use (
  {Duplex} = dep://stream
  {Runner, Ops, PluginParser} = alias://core

  ../JobRunCommandBase
)

/**
 * The options defined in the super types.
 */
const {baseOptions} = JobRunCommandBase

/**
 * The run command.
 */
@abstract
export struct JobRunCommand: JobRunCommandBase
  @override
  pub const name = ["run [jobName]", "r"]

  @override
  pub const desc = "Run a job from a catalog."

  @override
  pub const positionals = {
    jobName =
      type = "string"
      desc = "Job name to run. If unset, defaultJobName used."
  }

  @override
  pub const options = {
    {registries} = baseOptions
    {catalogName} = baseOptions
    {registryAndCatalogName} = baseOptions
    {arg} = baseOptions
    {onError} = baseOptions
    {reporter} = baseOptions
    {summaryReporter} = baseOptions
    {answer} = baseOptions
    {logAnswers} = baseOptions
  }

  @override @hidden
  pub async proc handle(argv=> {catalogName, registryAndCatalogName, jobName, onError, args, answers, reporters, summaryReporters, logAnswers})
    # (1) prepare
    if logAnswers then
      $KRM_ANSWERS_LOG = logAnswers

    # (2) create the registry instances to use
    const registries = await(self.createRegistries(argv).connect())

    var code  # ps exit code

    do
      # (3) create the ops to use
      const ops = Ops()

      # (4) determine the catalogName
      if registryAndCatalogName then
        catalogName = registryAndCatalogName.split("://")[1]

      # (5) get the catalog decl
      const decl = await(self.readCatalogDecl(
        (catalogName = self.buildCatalogPath(catalogName))
        registries
      ))

      if not decl then
        print($"Job catalog '${catalogName}' not found in '${registries.registryNames}'.")
        ps.exit(1)
      
      # (6) create global dataset
      const globalDataset = await(self.createGlobalDataset(decl, args, answers))

      # (7) create catalog instance
      const (
        pluginParser = PluginParser()
        catalog = await(self.createCatalog(decl, pluginParser, globalDataset, ops))
      )

      # (8) create engine
      const (
        log = native("new Duplex({emitClose: true, read() {}, write() {}})")
        engine = await(self.createEngine(
          {
            dataset = catalog.dataset
            onError = catalog.onError or onError
            runner = Runner(log=)
            pluginParser
            ops
          }

          registries.getRegistry(decl.registryName)
        ))
      )

      reporters = self.createReporters(reporters, log).connect()
      ops.appendOps(...values(catalog.jobs))

      # (9) run job
      do
        if not (jobName ?= catalog.defaultJobName) then
          console.error("Catalog doesn't contain default job name.")
          code = 2
        else
          if [ok, value] ::= pawait(engine.run({jobName})); not ok then
            code = 1
      finally
        await(catalog.finalize())
    finally
      pawait(registries.disconnect())
      peval(reporters.disconnect())
    
    await(sleep("1ms")) # for log stream to be processed
    ps.exit(code)
