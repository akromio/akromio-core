use (
  dep://path
  dep://yaml
  {Registries, Registry, FsConnector} = alias://registry
  DirSearcher
)

# Implicit extensions to concat when needed.
const extensions = [".yaml", ".yml", ".json"]

# Dir searcher to use.
const dirSearcher = DirSearcher()

/**
 * A reader for reading catalog declarations.
 */
@abstract
export struct CatalogReader
  /**
   * Catalog merger to use.
   */
  @abstract
  pub const merger: CatalogMerger

  /**
   * Akromio directory name such as, for example, .akromio.
   * Used when root registry searched.
   */
  pub const akromioDirName: text

  /**
   * Akromio job catalogs path such as, for example, /jobs/catalogs.
   * Used when root registry searched.
   */
  pub const akromioJobCatalogsPath: text

  /**
   * Searches and returns the base registry.
   * If not found, nil returned.
   */
  @hidden
  pub async fn searchBaseRegistry() -> base: Registry
    const {akromioDirName, akromioJobCatalogsPath} = self

    if basePath := await(dirSearcher.searchDirWith(akromioDirName)) then
      basePath = path.join(basePath, akromioDirName, akromioJobCatalogsPath)
      base = Registry(name = "base", client = FsConnector(basePath=))
  
  /**
   * Decomposes the catalog name into registry and catalogName.
   *
   * For example:
   * - base:///catalog.yaml in {registryName = base, catalogName = /catalogName}.
   * - /catalog.yaml in {registryName = nil, catalogName = /catalogName}.
   */
  @hidden
  pub fn decomposeCatalogName(catalogName: text, defaultRegistryName?: text): map
    # (1) decompose
    var (
      uriPattern ::= re("^(.+):\/\/(.+)$")
      registryName: text
    )

    if uriPattern.test(catalogName) then
      [_, registryName, catalogName] = uriPattern.exec(catalogName)

      if registryName then
        catalogName = "/" + catalogName
    
    # (2) return decomposition
    return {registryName = registryName or defaultRegistryName, catalogName}

  /**
   * Reads and returns a catalog declaration
   * from a given registry or a collection of registries.
   *
   * When catalog unexists, nil returned.
   */
  pub async fn readCatalogDecl(catalogName: text, registries: Registries, registryName?: text) -> decl: map
    # (1) decompose catalog name in registry and catalog
    {registryName, catalogName} = self.decomposeCatalogName(catalogName, registryName)
    
    # (2) create base registry if needed
    if registryName == "base" and not registries.getRegistry("base") then
      if base ::= await(self.searchBaseRegistry("base")) then
        await(base.connect())
        registries.appendRegistry(base, force = true)
      else
        throw(Error("base registry not found."))
    
    # (3) get the catalog declaration item
    var item

    if path.extname(catalogName) then
      item = await(registries.getItem(catalogName, registryName=))
    else
      for each ext in extensions do
        const itemPath = catalogName + ext

        if (item = await(registries.getItem(itemPath, registryName=))) then
          break
    
    # (4) parse catalog if needed
    if (decl = item?value) then
      if decl is Buffer then
        decl = text(decl)

      if decl is text then
        with cty ::= item.cty do
          if "text/yaml" then decl = yaml.parse(decl)
          if "application/json" then decl = json.decode(decl)
          else throw(TypeError($"Invalid content-type for catalog: ${cty}."))
    
    # (5) set registry data
    if decl then
      decl.{
        registryName = item.registryName
        name = catalogName
        loc = item.uri
        cty = item.cty
      }

    # (6) extend if needed
    if "extends" in decl then
      decl = await(self.extendCatalogDecl(decl, registries))
    
  /**
   * Extends a given catalog when extends field appears.
   *
   * @dev
   * We have to remember the following about the extends field:
   *
   * - This field can be a text or a text[].
   *
   * - Every text must be:
   *
   *   - An absolute path when starting with /.
   *   - A relative path when not starting with /.
   *   - A uri when registryName://absolutePath is indicated.
   *
   * When only relative or absolute path indicated, the registry to use
   * is the same as this used to read the catalog.
   */
  @hidden @noParamCheck
  pub async fn extendCatalogDecl(decl: map, registries: Registries) -> decl
    # (1) get the catalogs to extend
    var (
      catalogNames = list(decl.extends)
      {registryName} ::= decl
      basePath ::= path.dirname(decl.name)
      extend = []
    )

    for each catalogName := catalogNames do
      if "://" not in catalogName then
        catalogName = path.join(basePath, catalogName)

      if baseDecl ::= await(self.readCatalogDecl(catalogName, registries, registryName)) then
        extend.push(baseDecl)
      else
        throw(Error($"Catalog to extend not found: ${catalogName}."))

    # (2) extend the catalogs
    decl = self.merger.merge(decl, ...extend)
