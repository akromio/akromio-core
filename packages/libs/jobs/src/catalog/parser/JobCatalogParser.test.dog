use (
  alias://expected
  {sim, method} = alias://doubles
  {Dataset, GlobalDataset, LocalDataset} = alias://dataset
  {Ops, PluginParser, PluginLoader, Plugins, Plugin} = alias://core

  ../JobCatalog
  JobCatalogParser
)

suite(__filename, proc()
  const (
    globalDataset = GlobalDataset(name = "global")
    parentDataset = globalDataset
    ops = Ops()
    catalogOpt = {
      name = "test"
      loc = "file:///my/file.yaml"
      cty = "text/yaml"
    }
    catalogDecl = {
      spec = "v1.0"
      name = "test-catalog"
      loc = "test:///jobs/catalogs/test-catalog"
      cty = "text/yaml"
      desc = "A test catalog."
      jobs = []
    }
    pluginParser = PluginParser()
    pluginLoader = sim(PluginLoader, {})
    parser = JobCatalogParser(pluginParser=, pluginLoader)
  )

  suite("parse()", proc()
    const (
      catalogDecl = {
        name = "test"
        loc = "test:///test.yaml"
        cty = "text/yaml"
        spec = "v1.0"
        desc = "A catalog to perform the unit tests."
        defaultJobName = "build"
        jobs = []
      }
    )

    test("when invalid step decl, an error must be raised", async proc()
      # (1) act
      const (
        globalDataset = GlobalDataset(name = "global")
        out = pawait(parser.parse(
          catalogDecl{*, jobs = [{macrox = "mymacro", steps = []}]}
          catalog = catalogOpt
          parentDataset = globalDataset
          ops
        ))
      )

      # (2) assessment
      expected(out)\
        .it(0).equalTo(false)\
        .it(1).toBe(Error).like("Invalid job declaration")
    end)

    test("when valid decl w/o dataset, a jobs catalog must be returned", async proc()
      # (1) act
      const (
        globalDataset = GlobalDataset(name = "global")
        out = await(parser.parse(
          catalogDecl{
            *
            jobs = [
              {macro = "mymacro", steps = []}
              {co = "myco", steps = []}
            ]
          }
          catalog = catalogOpt
          parentDataset = globalDataset
          ops
        )
      ))

      # (2) assessment
      expected(out).toBe(JobCatalog).toHave(
        spec = "v1.0"
        loc = "test:///test.yaml"
        cty = "text/yaml"
        desc = "A catalog to perform the unit tests."
        plugins = Plugins()
        defaultJobName = "build"
      ).member("dataset").toBe(LocalDataset)\
       .member("dataset.parent").sameAs(globalDataset)
      
      expected(out.jobs).toBeMap()
    end)

    test("when valid decl w/ dataset, a jobs catalog must be returned", async proc()
      # (1) act
      const (
        globalDataset = GlobalDataset(name = "global")
        out = await(parser.parse(
          catalogDecl{*, dataset = [{var = "mydatum", value = "my value"}]}
          catalog = catalogOpt
          parentDataset = globalDataset
          ops
        ))
      )

      # (2) assessment
      expected(out).toBe(JobCatalog).toHave(
        spec = "v1.0"
        loc = "test:///test.yaml"
        cty = "text/yaml"
        desc = "A catalog to perform the unit tests."
        plugins = Plugins()
        defaultJobName = "build"
        jobs = {}
      ).member("dataset").toBe(LocalDataset)
    end)

    test("when valid decl w/ plugins, a jobs catalog must be returned", async proc()
      # (1) act
      const (
        piWoi = {
          name = "pi-without-ini"
          ops = {}
        }

        piWini = {
          name = "pi-with-ini"
          ops = {}
          ini = fn() = "value" end
        }

        pluginLoader = sim(
          PluginLoader
          loadPlugin = method([
            {args = ["pi-without-ini"], returns = piWoi}
            {args = ["pi-with-ini"], returns = piWini}
          ])
        )

        parser = JobCatalogParser(pluginLoader=, pluginParser)

        globalDataset = GlobalDataset(name = "global")
        out = await(parser.parse(
          catalogDecl{
            *
            plugins = [
              {plugin = "woi", impl = "pi-without-ini"}
              {plugin = "wi", impl = "pi-with-ini"}
            ]
          }
          catalog = catalogOpt
          parentDataset = globalDataset
          ops
        ))
      )

      # (2) assessment
      expected(out).toBe(JobCatalog).toHave(
        spec = "v1.0"
        loc = "test:///test.yaml"
        cty = "text/yaml"
        desc = "A catalog to perform the unit tests."
        defaultJobName = "build"
        jobs = {}
      ).member("dataset").toBe(LocalDataset)\
       .member("dataset.parent").sameAs(globalDataset)

      expected(out.plugins).toBe(Plugins).toHaveLen(2)\
        .get("items.woi").toBe(Plugin).toHave(name = "woi", state = nil)\
        .get("items.wi").toBe(Plugin).toHave(name = "wi", state = "value")
    end)
  end)

  suite("parsePlugins()", proc()
    test("when plugin, a Plugin instance must be returned", async proc()
      # (1) act
      const (
        piWoi = {name = "pi-without-ini", ops = {}}
        piWini = {name = "pi-with-ini", ops = {}, ini = fn() = "value" end}
        plugins = [
          {plugin = "woi", impl = "pi-without-ini"}
          {plugin = "wi", name = "WI", impl = "pi-with-ini"}
        ]

        pluginLoader = sim(
          PluginLoader
          loadPlugin = method([
            {args = ["pi-without-ini"], returns = piWoi}
            {args = ["pi-with-ini"], returns = piWini}
          ])
        )

        parser = JobCatalogParser(pluginLoader=, pluginParser)

        out = await(parser.parse(
          catalogDecl{*, plugins}
          parentDataset=,
          ops
        )).plugins
      )

      # (2) assessment
      expected(out).toBe(Plugins).toHaveLen(2)
      expected(out.getPlugin("woi")).toHave(name = "woi", state = nil)
      expected(out.getPlugin("WI")).toHave(name = "WI", state = "value")
    end)

    test("when preset, its plugins must be loaded, parsed and returned", async proc()
      # (1) act
      const (
        pi1 = {
          plugin = "pi1"
          ops =
            op11 = {fun = nop}
            op12 = {fun = nop}
        }

        pi2 = {
          plugin = "pi2"
          ops =
            op21 = {fun = nop}
            op22 = {fun = nop}
        }

        preset = {
          name = "test-preset"
          tags = ["test"]
          plugins = [
            {plugin = pi1.name, impl = pi1}
            {plugin = pi2.name, impl = pi2}
          ]
        }

        plugins = [{preset = "test-preset"}]
        pluginLoader = sim(
          PluginLoader
          loadPreset = method.returns(preset)
          loadPlugin = method.invokes(fn(...args)
            printf(args)
            return args[0]
          end)
        )
        parser = JobCatalogParser(pluginLoader=, pluginParser)
        out = await(parser.parse(
          catalogDecl{*, plugins}
          parentDataset=,
          ops
        )).plugins
      )

      # (2) assessment
      expected(out).toHaveLen(2)
      expected(out.getPlugin("pi1")).toHave(name = "pi1")
      expected(out.getPlugin("pi2")).toHave(name = "pi2")
    end)

    test("when unknown plugin item, error must be raised", async proc()
      # (1) act
      const (
        plugins = [{name = "woi", impl = "pi-without-ini"}]
        parser = JobCatalogParser(pluginLoader=, pluginParser)
        out = pawait(parser.parse(
          catalogDecl{*, plugins}
          parentDataset=,
          ops
        ))
      )

      # (2) assessment
      expected(out)\
        .it(0).equalTo(false)\
        .it(1).equalTo(TypeError("Unknown plugin declaration: { name: 'woi', impl: 'pi-without-ini' }."))
    end)
  end)

  suite("parseTriggers()", proc()
    test("when triggers, triggers must be parsed", async proc()
      # (1) act
      const (
        parser = JobCatalogParser(pluginLoader=, pluginParser)
        trg1 = {trigger = "trg1"}
        trg2 = {trigger = "trg2"}
        triggers = [trg1, trg2]
        out = await(parser.parse(
          catalogDecl{*, on = triggers}
          parentDataset=,
          ops
        )).triggers
      )

      # (2) assessment
      printf(out)
      expected(out).equalTo(trg1=, trg2)
    end)
  end)
end)
