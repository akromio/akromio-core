use (
  {Dataset} = alias://dataset
  {Ops, CatalogParser} = alias://catalog
  {buildPluginPackageName, Plugin, Plugins, PluginParser, PluginLoader} = alias://core

  ../JobCatalog
  JobParser, JobCatalogParseOpts
)

/**
 * The parser for the job declarations.
 */
const jobParser = JobParser()

/**
 * A parser to parse jobs catalog declarations.
 */
export struct JobCatalogParser: CatalogParser
  /**
   * The plugin loader to use.
   */
  pub const pluginLoader: PluginLoader

  /**
   * The plugin parser to use.
   */
  pub const pluginParser: PluginParser

  @override @hidden
  pub fn createCatalog(decl: map) = JobCatalog(decl)

  @override @hidden
  pub async fn parseSpecialization(decl: map, opts: JobCatalogParseOpts) -> decl
    # (1) parse plugins
    const (
      {dataset} = decl
      {ops} = opts
      pluginsDecl = dataset.eval(decl.plugins ?? [])
      plugins = await(self.parsePlugins(pluginsDecl))
    )

    for each pi: Plugin in plugins.plugins do
      ops.appendPlugin(pi)

    # (2) parse jobs
    const jobs = self.parseJobs(decl.jobs, opts)

    # (3) adapt declaration
    decl.{plugins, jobs}

  /**
   * Parses the plugin declarations,
   * returning the instances for these declarations.
   */
  @hidden
  pub async fn parsePlugins(decl: map[]) -> plugins: Plugins
    const (
      loader = self.pluginLoader
      parser = self.pluginParser
    )

    plugins = Plugins()

    for each def in decl do
      if "preset" in def then
        # get preset declaration
        const psDecl = loader.loadPreset(def.preset)

        # create plugin instances from preset
        for each plugin: Plugin in await(parser.parsePreset(psDecl)) do
          plugins.appendPlugin(plugin)
      else if "plugin" in def then
        # get plugin declaration
        const piDecl = loader.loadPlugin(buildPluginPackageName(def.impl ?? def.plugin))

        # create new plugin instance
        const name = def.plugin
        plugins.appendPlugin(await(parser.parsePlugin(piDecl{*, plugin = name}, def.ini)))
      else
        throw(TypeError($"Unknown plugin declaration: ${fmt(def)}."))
  
  /**
   * Parses the job declarations,
   * returning a list with the job instances.
   */
  @hidden
  pub fn parseJobs(decl: map[], opts: JobCatalogParseOpts) -> jobs: map
    for each jobDecl in decl do
      for each name, job in jobParser.parse(jobDecl, opts) do
        jobs[name] = job
