use (
  alias://expected
  {simulator} = alias://doubles
  {GlobalDataset} = alias://dataset
  {monitor} = alias://doubles
  {DynamicCo, CoOperator, StaticAction, ActionOperator} = ~
)

suite(__filename, proc()
  const (
    globalDataset = GlobalDataset(name = "global")
    log = simulator.stream.duplex()
  )

  suite("performWorks()", proc()
    struct TestCo: DynamicCo
        @override
        pub fn getSteps() = [
          {
            title = "1st step"
            op = StaticAction(name = "1st", fun = fn() = "action #1" end, operator = ActionOperator())
            args = 123
            onError = "carryOn"
          }

          {
            title = "2nd step"
            op = StaticAction(name = "2nd", fun = fn() = "action #2" end, operator = ActionOperator())
            args = 321
            resultVarName = "2nd"
            onError = "carryOn"
          }
        ]

    test("when called and everything is alright, a result for every step must be returned as value", async proc()
      # (1) act
      const (
        co = TestCo(name = "co", operator = CoOperator())
        out = await(co.run(dataset = globalDataset, log))
      )

      # (2) assessment
      expected(out)\
        .toBe("Result")\
        .toHave(title = "co", kind = "ok", onError = "carryOn")

      expected(out.value)\
        .toBeList().toHaveLen(2)\
        .item(0).toBe("Result").toHave(title = "1st", kind = "ok", value = "action #1")\
        .item(1).toBe("Result").toHave(title = "2nd", kind = "ok", value = "action #2")
    end)
  end)
end)