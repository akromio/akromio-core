use (
  dep://redis
  dep://ms
  {PassThrough} = dep://stream
  {RunCommand as RunCommandBase} = alias://cli
  {Stage, ConstStage, ExitStage, IncStage, SleepStage} = alias://stages
  {ConstStarter, ExitStarter, IncStarter, SleepStarter, BlankSheetStream} = alias://generator
  {RandomAssigner, Ring, RunReqStream} = alias://generator
  {Distributors, ConsoleDistributor, RedisStreamsDistributor} = alias://generator
  {ConstDatum} = alias://dataset

  _StageCommand
)

/**
 * Options defined in the super types.
 */
const {baseOptions} = RunCommandBase

/**
 * The run command.
 */
export struct RunCommand: RunCommandBase:: _StageCommand
  @override
  pub const name := ["run [stages..]", "r"]

  @override
  pub const desc := "Run a stage from a catalog."

  @override
  pub const positionals := {
    stages =
      type = "string"
      desc = "stage or stage:botnet to run. If unset, defaultStageName:botnet used."
  }

  @override
  pub const options := {
    {registries} = baseOptions
    {catalogName} = baseOptions
    {registryAndCatalogName} = baseOptions
    {arg} = baseOptions

    log =
      alias = ["l"]
      desc = "Show the log of the run requests generated."
      type = "boolean"
      default = false

    onlyLog =
      alias = ["L"]
      desc = "Only show the log of the run requests generated."
      type = "boolean"
      default = false
    
    name =
      alias = ["n"]
      desc = "Identifier of this instance of Carboni."
      type = "string"
      default = "carboni"
  }

  @override @hidden
  pub async proc handle(
    argv=> {catalogName, registryAndCatalogName, stages, args, log, onlyLog, name}
  )
    # (1) create the registry instances to use
    const registries = await(self.createRegistries(argv).connect())

    var code  # ps exit code

    do
      # (2) determine the catalogName
      if registryAndCatalogName then
        catalogName = registryAndCatalogName.split("://")[1]

      # (3) get the catalog decl
      const decl = await(self.readCatalogDecl(
        (catalogName = self.buildCatalogPath(catalogName))
        registries
      ))

      if not decl then
        print($"Stage catalog '${catalogName}' not found in '${registries.registryNames}'.")
        ps.exit(1)
      
      # (4) create global dataset
      const dataset = await(self.createGlobalDataset(decl, args)).setDatum(
        ConstDatum(name = "instance", desc = "Carboni instance name.", value = name)
      )

      # (5) create catalog instance
      const catalog = await(self.createCatalog(decl, dataset))

      # (6) get stage and botnet
      const stagenets#[: list<{stageName, botnetName}>] = []

      # use default stage?
      if len(stages) == 0 then
        if not catalog.defaultStageName then
          console.error("Catalog doesn't contain default stage name.")
          code = 2
        else
          stages = [catalog.defaultStageName + ":botnet"]
      
      # extract stage and botnet names for each given stage
      if code != 2 then
        const args = dataset.getDatumValue("args")

        for each stage in stages do
          var [stageName, botnetName] = stage.split(":")
          botnetName ?= "botnet"

          if stage ::= catalog.stages[stageName] then
            if botnet ::= args[botnetName]; not botnet then
              console.log($"Botnet not found: ${botnetName}.")
              code = 2
              break
            else
              stagenets.push({stage, botnet})
          else
            console.error($"Stage not found: ${stageName}.")
            code = 2
            break

      # (7) run stages
      for each stagenet in stagenets do
        const {stage, botnet} = stagenet

        print($"Stage: ${stage.name} (duration: ${ms(stage.duration)})")
        await(self.runStage(stage, botnet, log=, onlyLog, name))
    finally
      pawait(registries.disconnect())
    
    ps.exit(code)

  /**
   * Creates a stage catalog instance.
   */
  @hidden
  pub async fn createCatalog(decl: map, globalDataset) -> catalog
    const catalogParser = self.createCatalogParser()

    catalog = await(catalogParser.parse(
      decl
      parentDataset = globalDataset
    ))
  
  /**
   * Run a [stage].
   */
  @hidden @async
  pub fn runStage(stage: Stage, botnet?: {impl: text, bots: map[]}, opts: map) -> promise
    with type(stage) do
      if ConstStage then promise = self.runConstStage(stage, botnet, opts)
      if IncStage then promise = self.runIncStage(stage, botnet, opts)
      if SleepStage then promise = self.runSleepStage(stage)
      if ExitStage then promise = self.runExitStage(stage, botnet, opts)
      else throw(Error($"Unknown stage: ${fmt(stage)}."))

  /**
   * Run a constant [stage].
   */
  @hidden
  pub async fn runConstStage(
    stage: ConstStage
    botnet: {impl: text, bots: map[]}
    opts:> {onlyLog: bool, log: bool, name: text}
  )
    # (1) create starter
    const (
      starterOutput = BlankSheetStream()
      times = stage.duration / stage.interval.duration
      blankSheets = stage.interval.requests
      starterProps = stage{*, output = starterOutput, interval = stage.interval.duration, times, blankSheets}
      starter = ConstStarter(starterProps)
    )
    
    # (2) create rest of components
    const (
      assignerOutput = RunReqStream()

      assigner = createAssigner(
        input = starterOutput
        output = assignerOutput
        ring = Ring(points = botnet.bots.map(fn(bot) = bot.bot end))
        assignations = stage.jobs
      )

      distributor = createDistributor(assignerOutput, botnet, opts)
    )

    # (3) start components
    return Promise.all([
      starter.start()
      assigner.start()
      distributor.start()
    ])
  
  /**
   * Run an incremental [stage].
   */
  @hidden
  pub async fn runIncStage(stage: IncStage, botnet: {impl: text, bots: map[]}, opts: map)
    # (1) create starter
    const (
      starterOutput = BlankSheetStream()
      times = stage.duration / stage.interval.duration
      blankSheets = stage.interval.requests
      starterProps = stage{
        *
        output = starterOutput
        interval = stage.interval.duration
        inc = stage.interval.inc
        times
        blankSheets
      }
      starter = IncStarter(starterProps)
    )
    
    # (2) create rest of components
    const (
      assignerOutput = RunReqStream()

      assigner = createAssigner(
        input = starterOutput
        output = assignerOutput
        ring = Ring(points = botnet.bots.map(fn(bot) = bot.bot end))
        assignations = stage.jobs
      )

      distributor = createDistributor(assignerOutput, botnet, opts)
    )

    # (3) start components
    return Promise.all([
      starter.start()
      assigner.start()
      distributor.start()
    ])

  /**
   * Runs a sleep stage.
   */
  @hidden @async
  pub proc runSleepStage(stage: SleepStage)
    const (
      starterOutput = BlankSheetStream()
      times = stage.duration / 1000
      starterProps = stage{*, output = starterOutput, times}
      starter = SleepStarter(starterProps)
    )
      
    return starter.start()
  
  /**
   * Run an incremental [stage].
   */
  @hidden
  pub async fn runExitStage(stage: ExitStage, botnet: {impl: text, bots: map[]}, opts: map)
    # (1) create starter
    const (
      starterOutput = BlankSheetStream()
      starterProps = stage{*, output = starterOutput}
      starter = ExitStarter(starterProps)
    )
    
    # (2) create rest of components
    const (
      assignerOutput = RunReqStream()

      assigner = createAssigner(
        input = starterOutput
        output = assignerOutput
        ring = Ring(points = botnet.bots.map(fn(bot) = bot.bot end))
        assignations = [{job = "__exit__", weight = 100}]
      )

      distributor = createDistributor(assignerOutput, botnet, opts)
    )

    # (3) start components
    return Promise.all([
      starter.start()
      assigner.start()
      distributor.start()
    ])

/**
 * Creates the assigner.
 */
fn createAssigner(props: map) = RandomAssigner(props)

/**
 * Creates the distributor.
 */
fn createDistributor(
  assignerOutput
  botnet
  opts:> {onlyLog: bool, log: bool, name: text}
) -> distributor: Distributor
  const props = botnet{*, input = assignerOutput, name}

  if onlyLog then
    distributor = ConsoleDistributor(props)
  else
    with i ::= botnet.impl do
      if "redisstreams" then distributor = createRedisStreamsDistributor(props, botnet, opts)
      else throw(TypeError($"Unknown botnet impl: ${i}."))
    
    if log then
      distributor = Distributors().append(distributor).append(
        ConsoleDistributor(props{*, input = assignerOutput.pipe(
          native("new PassThrough({readableObjectMode: true, writableObjectMode: true})")
        )})
      )

/**
 * Creates a Redis Streams distributor.
 */
fn createRedisStreamsDistributor(props, botnet, opts:> {name: text}) -> distributor: RedisStreamsDistributor
  const opts = {
    name
    socket =
      host = botnet.host ?? "localhost"
      port = botnet.port ?? 6379
    if botnet.username then username = botnet.username
    if botnet.password then password = botnet.password
  }

  distributor = RedisStreamsDistributor(props{*, redis = redis.createClient(opts)})
