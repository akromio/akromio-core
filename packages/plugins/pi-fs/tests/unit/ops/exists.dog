use (
  alias://expected
  pi = ~
)

const op = pi.ops.exists

suite(__filename, proc()
  const (
    path = "/my/file.txt"
    content = "my content"
  )

  suite("buildParams()", proc()
    const buildParams = op.parameterizer

    test("when path, {path} must be returned", proc()
      # (1) act
      const out = buildParams(path)

      # (2) assessment
      expected(out).equalTo(
        path=,
      )
    end)

    test("when [path], {path} must be returned", proc()
      # (1) act
      const (
        out = buildParams([path])
      )

      # (2) assessment
      expected(out).equalTo(path=)
    end)

    test("when map, the same map must be returned", proc()
      # (1) act
      const (
        args = {path}
        out = buildParams(args)
      )

      # (2) assessment
      expected(out).sameAs(args)
    end)
  end)

  suite("buildTitle()", proc()
    const buildTitle = op.title

    test("when called, a title must be returned", proc()
      # (1) act
      const (
        params = {path}
        out = buildTitle(params)
      )

      # (2) assessment
      expected(out).equalTo($"fs: check whether '${path}' is readable")
    end)
  end)

  suite("handler()", proc()
    const handler = op.fun

    test("when readable, true must be returned", async proc()
      # (1) act
      const out = await(handler(params = {path = __filename}))

      # (2) assessment
      expected(out).equalTo(true)
    end)

    test("when not readable, false must be returned", async proc()
      # (1) act
      const out = await(handler(params = {path = "unknown.txt"}))

      # (2) assessment
      expected(out).equalTo(false)
    end)
  end)
end)