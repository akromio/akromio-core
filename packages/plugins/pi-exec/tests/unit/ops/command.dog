use (
  alias://expected
  pi = ~
)

const op = pi.ops.command

suite(__filename, proc()
  suite("buildParams()", proc()
    const buildParams = op.parameterizer

    test("when command, {command, opts = {}} must be returned", proc()
      # (1) act
      const out = buildParams("ls -l")

      # (2) assessment
      expected(out).equalTo(
        command = "ls -l"
        opts = {}
      )
    end)

    test("when [command], {command, opts = {}} must be returned", proc()
      # (1) act
      const out = buildParams(["ls -l"])

      # (2) assessment
      expected(out).equalTo(
        command = "ls -l"
        opts = {}
      )
    end)

    test("when [command, opts], {command, opts} must be returned", proc()
      # (1) act
      const out = buildParams(["ls -l", {workDir = "/"}])

      # (2) assessment
      expected(out).equalTo(
        command = "ls -l"
        opts = {workDir = "/"}
      )
    end)

    test("when {...}, the same map must be returned", proc()
      # (1) act
      const out = buildParams({command = "ls -l"})

      # (2) assessment
      expected(out).equalTo(
        command = "ls -l"
      )
    end)
  end)

  suite("buildTitle()", proc()
    const buildTitle = op.title

    test("when called, a title must be returned", proc()
      # (1) act
      const (
        command = "ls -l"
        params = {command}
        out = buildTitle(params)
      )

      # (2) assessment
      expected(out).equalTo($"exec: run '${command}'")
    end)
  end)

  suite("handler()", proc()
    const handler = op.fun

    test("when command run ok, result must be returned", async proc()
      # (1) act
      const (
        ctx = {
          params =
            command = "ls -l"
            opts =
              workDir = __dirname
        }

        out = await(handler(ctx))
      )

      # (2) assessment
      expected(
        out
      ).toBeMap()\
       .member("stdout").like("command")\
       .member("stderr").equalTo("")
    end)

    test("when command run ok, result must be returned", async proc()
      # (1) act
      const (
        ctx = {
          params =
            command = "lslslsls -l"
            opts = {}
        }

        out = pawait(handler(ctx))
      )

      # (2) assessment
      expected(out).it(0).equalTo(false).it(1).like("Command failed")
    end)
  end)
end)