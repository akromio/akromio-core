use (
  dep://axios
  alias://expected
  {monitor, simulator} = alias://doubles
  pi = ~
)

const op = pi.ops.patch

suite(__filename, proc()
  const (
    buildTitle = op.title
    handler = op.fun
    url = "https://www.google.es"
  )

  suite("buildTitle()", proc()
    test("when called, a title must be returned", proc()
      # (1) act
      const (
        params = {url}
        out = buildTitle(params)
      )

      # (2) assessment
      expected(out).equalTo($"http: patch '${params.url}'")
    end)
  end)

  suite("handler()", proc()
    const originalPatch = axios.patch

    teardown(proc()
      axios.patch = originalPatch
    end)

    test("when called w/o options, {} is used and a response must be returned", async proc()
      # (1) pre
      const (
        resp = {status = 200, statusText = "OK"}
        patch = monitor(simulator.fun(resolves = resp))
      )

      axios.{patch}

      # (2) act
      const out = await(handler({params = {url}}))

      # (3) assessment
      const log = monitor.log(patch, clear = true)

      expected(out).equalTo(resp)
      expected(log).toHaveLen(1)
      expected(log.calledWith([url, {}])).equalTo(1)
    end)

    test("when called w/ options, these options used and a response must be returned", async proc()
      # (1) pre
      const (
        resp = {status = 200, statusText = "OK"}
        patch = monitor(simulator.fun(resolves = resp))
      )

      axios.{patch}

      # (2) act
      const (
        opts = {headers = {'X-Requested-With' = "akromio"}}
        out = await(handler({params = {url, opts}}))
      )

      # (3) assessment
      const log = monitor.log(patch, clear = true)

      expected(out).equalTo(resp)
      expected(log).toHaveLen(1)
      expected(log.calledWith([url, opts])).equalTo(1)
    end)
  end)
end)